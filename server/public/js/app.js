let base_url = "http://neom.bet:3000";

App = {
    web3Provider: null,
    account: null,
    MatchInstance: null,
    MatchInstancePrice: null,

    CryptoInstance: null,
    CryptoInstancePrice: null,

    matches: {},
    currencyId: null,
    matchId: null,
    getAccount: function () {
        return new Promise((resolve, reject) => {
            web3.eth.getAccounts(function (error, accounts) {
                if (error) {
                    return reject(error);
                } else {
                    return resolve(accounts[0]);
                }
            });
        });
    },

    initWeb3: function () {
        return new Promise((resolve, reject) => {
            if (typeof web3 !== 'undefined') {
                App.web3Provider = web3.currentProvider;
            } else {
                App.web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');
                alert("Please install Metamask before proceeding.");
                return;
            }
            web3 = new Web3(App.web3Provider);
            if (web3 == null || typeof web3 === 'undefined') {
                return reject("Something went wrong");
            } else {
                return resolve("Successfully connected to Web3 Provider.");
            }
        });
    },

    createMatchesBetContract: function () {
        let temp_match_id = App.matchId;
        let current_data = {};
        let match = App.matches[+App.matchId];
        let price = $("#subscription_price").val();
        let visibility_flag = $('#visibility_flag option:selected').val();
        let _league = match["league"];
        let _teamOne = match["homeTeam"]["name"];
        let _teamTwo = match["awayTeam"]["name"];
        let _matchTimestamp = Math.floor(new Date(match["utcDate"]).getTime() / 1000);
        let _executionDelay = _matchTimestamp + (3 * 60 * 60);
        let _price = +price * 1e18;
        console.log(+App.matchId, _league, _teamOne, _teamTwo, _matchTimestamp, _executionDelay, _price);
        var SolidSportBet = web3.eth.contract(App.SOLID_SPORT_BET_ABI);
        var SolidSportBetInstance = SolidSportBet.new(+App.matchId, _league, _teamOne, _teamTwo, _matchTimestamp, _executionDelay, _price, {
                from: App.account,
                value: 0.1 * 1e18,
                data: '0x60806040526000600655600a60075560405160e080620037dc83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050662386f26fc1000034101515156200008457600080fd5b86600881905550856009816000191690555084600a816000191690555083600b816000191690555082600c8190555081600d8190555080600e8190555073908e009ea04508db32933f463dec7d1d60aaa93f600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200012f6200013c640100000000026401000000009004565b50505050505050620019c4565b6060806060620001906040805190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525062000356640100000000026401000000009004565b3073ffffffffffffffffffffffffffffffffffffffff16311115156200021e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6e6f20617069206665650000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6040805190810160405280602081526020017f687474703a2f2f6e656f6d2e6265743a333030302f76312f6d6174636865732f81525092506200027260085462000757640100000000026401000000009004565b9150620002fb6040805190810160405280600581526020017f6a736f6e2800000000000000000000000000000000000000000000000000000081525084846040805190810160405280600581526020017f292e726177000000000000000000000000000000000000000000000000000000815250620008b9640100000000026401000000009004565b905062000350600d546040805190810160405280600381526020017f55524c00000000000000000000000000000000000000000000000000000000008152508362000914640100000000026401000000009004565b50505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480620003d857506000620003d66000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000ef2640100000000026401000000009004565b145b15620003fb57620003f9600062000efd640100000000026401000000009004565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200048157600080fd5b505af115801562000496573d6000803e3d6000fd5b505050506040513d6020811015620004ad57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000619576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200059b57600080fd5b505af1158015620005b0573d6000803e3d6000fd5b505050506040513d6020811015620005c757600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620006c5578082015181840152602081019050620006a8565b50505050905090810190601f168015620006f35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156200071357600080fd5b505af115801562000728573d6000803e3d6000fd5b505050506040513d60208110156200073f57600080fd5b81019080805190602001909291905050509050919050565b60606000806060600080861415620007a7576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450620008b0565b8593505b600084141515620007d4578280600101935050600a84811515620007cb57fe5b049350620007ab565b826040519080825280601f01601f191660200182016040528015620008085781602001602082028038833980820191505090505b5091506001830390505b600086141515620008ac57600a868115156200082a57fe5b066030017f0100000000000000000000000000000000000000000000000000000000000000028282806001900393508151811015156200086657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515620008a357fe5b04955062000812565b8194505b50505050919050565b60606200090a85620008f586620008e0878762000f1f640100000000026401000000009004565b62000f1f640100000000026401000000009004565b62000f1f640100000000026401000000009004565b9050949350505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806200099857506000620009966000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000ef2640100000000026401000000009004565b145b15620009bb57620009b9600062000efd640100000000026401000000009004565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000a4157600080fd5b505af115801562000a56573d6000803e3d6000fd5b505050506040513d602081101562000a6d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000bd9576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000b5b57600080fd5b505af115801562000b70573d6000803e3d6000fd5b505050506040513d602081101562000b8757600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000c8557808201518184015260208101905062000c68565b50505050905090810190601f16801562000cb35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801562000cd357600080fd5b505af115801562000ce8573d6000803e3d6000fd5b505050506040513d602081101562000cff57600080fd5b8101908080519060200190929190505050905062030d403a02670de0b6b3a76400000181111562000d37576000600102915062000eea565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f99828787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101562000df057808201518184015260208101905062000dd3565b50505050905090810190601f16801562000e1e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101562000e5957808201518184015260208101905062000e3c565b50505050905090810190601f16801562000e875780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15801562000ea957600080fd5b505af115801562000ebe573d6000803e3d6000fd5b50505050506040513d602081101562000ed657600080fd5b810190808051906020019092919050505091505b509392505050565b6000813b9050919050565b600062000f1862000f77640100000000026401000000009004565b9050919050565b606062000f6f8383602060405190810160405280600081525060206040519081016040528060008152506020604051908101604052806000815250620014cf640100000000026401000000009004565b905092915050565b60008062000fa8731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed62000ef2640100000000026401000000009004565b11156200105c57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620010526040805190810160405280600b81526020017f6574685f6d61696e6e6574000000000000000000000000000000000000000000815250620018f9640100000000026401000000009004565b60019050620014cc565b60006200108c73c03a2615d5efaf5f49f60b7bb6583eaec212fdf162000ef2640100000000026401000000009004565b1115620011405773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620011366040805190810160405280600c81526020017f6574685f726f707374656e330000000000000000000000000000000000000000815250620018f9640100000000026401000000009004565b60019050620014cc565b60006200117073b7a07bcf2ba2f2703b24c0691b5278999c59ac7e62000ef2640100000000026401000000009004565b1115620012245773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200121a6040805190810160405280600981526020017f6574685f6b6f76616e0000000000000000000000000000000000000000000000815250620018f9640100000000026401000000009004565b60019050620014cc565b60006200125473146500cfd35b22e4a392fe0adc06de1a1368ed4862000ef2640100000000026401000000009004565b1115620013085773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620012fe6040805190810160405280600b81526020017f6574685f72696e6b656279000000000000000000000000000000000000000000815250620018f9640100000000026401000000009004565b60019050620014cc565b600062001338736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47562000ef2640100000000026401000000009004565b11156200139d57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050620014cc565b6000620013cd7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf62000ef2640100000000026401000000009004565b111562001432577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050620014cc565b6000620014627351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa62000ef2640100000000026401000000009004565b1115620014c7577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050620014cc565b600090505b90565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f1916602001820160405280156200152e5781602001602082028038833980820191505090505b50935083925060009150600090505b8851811015620015f45788818151811015156200155657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515620015b657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506200153d565b600090505b8751811015620016b05787818151811015156200161257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156200167257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050620015f9565b600090505b86518110156200176c578681815181101515620016ce57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156200172e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050620016b5565b600090505b8551811015620018285785818151811015156200178a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515620017ea57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505062001771565b600090505b8451811015620018e45784818151811015156200184657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515620018a657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506200182d565b82995050505050505050505095945050505050565b80600290805190602001906200191192919062001915565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200195857805160ff191683800117855562001989565b8280016001018555821562001989579182015b82811115620019885782518255916020019190600101906200196b565b5b5090506200199891906200199c565b5090565b620019c191905b80821115620019bd576000816000905550600101620019a3565b5090565b90565b611e0880620019d46000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461007d57806338bbfa50146100f45780634fb2e45d146101b1578063565974d3146101f45780638437081314610268578063df7bf70414610292575b600080fd5b34801561008957600080fd5b506100f26004803603810190808035600019169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102c4565b005b34801561010057600080fd5b506101af6004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061049b565b005b3480156101bd57600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a0565b005b34801561020057600080fd5b50610209610540565b604051808981526020018860001916600019168152602001876000191660001916815260200186600019166000191681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b610290600480360381019080803590602001909291908035906020019092919050505061057e565b005b34801561029e57600080fd5b506102a76106f9565b604051808381526020018281526020019250505060405180910390f35b6102cc610710565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103525750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b801561036057506000600654145b15156103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f496e76616c6964204f7261636c652043616c6c6261636b00000000000000000081525060200191505060405180910390fd5b7fb749f9f34ea0f118080413f464339dbd20e14dc877db555d47b85ff4f418d649816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043657808201518184015260208101905061041b565b50505050905090810190601f1680156104635780820380516001836020036101000a031916815260200191505b509250505060405180910390a18060149080519060200190610486929190611d16565b5061048f610a6e565b6104976110d5565b5050565b505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104fc57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600080600080600854600954600a54600b54600c54600d54600e54600654975097509750975097509750975097509091929394959697565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161480156105bb5750600e543410155b80156105c957506103e88211155b80156105d757506103e88111155b15156105e257600080fd5b600f6060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050503373ffffffffffffffffffffffffffffffffffffffff167fd9fd7ff1b2e807f687c0bbd788ba5362d0e7c7bdcdbea264adf9457c9e2b35ec8383604051808381526020018281526020019250505060405180910390a25050565b600080601060010154601060020154915091509091565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107805750600061077e6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112d1565b145b156107915761078f60006112dc565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505050506040513d602081101561084057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109a8576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b505050506040513d602081101561095657600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b8101908080519060200190929190505050905090565b600080600080600080610b5060148054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b105780601f10610ae557610100808354040283529160200191610b10565b820191906000526020600020905b815481529060010190602001808311610af357829003601f168201915b50505050506040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506112ed565b15610b5a576110cd565b610bff60148054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b505050505060006114b3565b9550620f423f861115610c11576110cd565b60016006819055506103e886811515610c2657fe5b0494506103e88502860393506060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815250601060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506402540be4009150600090505b600f8054905081101561108d57610df16010606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050600f83815481101515610d6857fe5b9060005260206000209060030201606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250506117a7565b1561108057610f09600f82815481101515610e0857fe5b9060005260206000209060030201606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250506010606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050611819565b925081831015610fcf5782915060136000610f249190611d96565b6013600f82815481101515610f3557fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061107f565b8183141561107e576013600f82815481101515610fe857fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5b5b8080600101915050610cd1565b7ffce25d0084d4e4c40132a93c5b5630453901e52fb4e21103e4c07802e8a36ada8585604051808381526020018281526020019250505060405180910390a15b505050505050565b600080600060075460640392503073ffffffffffffffffffffffffffffffffffffffff16319150600060138054905011156112495760646013805490500283830281151561111f57fe5b049250600090505b6013805490508110156112485760138181548110151561114357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156111b3573d6000803e3d6000fd5b506013818154811015156111c357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe996987d056eca0e2ed60cc6fd77731e38c3a90676a4b93a436854cabbdac12f846040518082815260200191505060405180910390a28080600101915050611127565b5b3073ffffffffffffffffffffffffffffffffffffffff16319150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156112cb573d6000803e3d6000fd5b50505050565b6000813b9050919050565b60006112e6611848565b9050919050565b60008151835114151561130357600090506114ad565b816040516020018082805190602001908083835b60208310151561133c5780518252602082019150602081019050602083039250611317565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156113a55780518252602082019150602081019050602083039250611380565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b60208310151561140f57805182526020820191506020810190506020830392506113ea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156114785780518252602082019150602081019050602083039250611453565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161490505b92915050565b6000606060008060008693506000925060009150600090505b83518110156117885760307f010000000000000000000000000000000000000000000000000000000000000002848281518110151561150757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561161f575060397f01000000000000000000000000000000000000000000000000000000000000000284828151811015156115af57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156116d057811561164257600086141561163857611788565b8580600190039650505b600a830292506030848281518110151561165857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004038301925061177b565b602e7f010000000000000000000000000000000000000000000000000000000000000002848281518110151561170257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561177a57600191505b5b80806001019150506114cc565b600086111561179a5785600a0a830292505b8294505050505092915050565b6000826040015183602001511180156117c7575081604001518260200151115b806117ec5750826040015183602001511080156117eb575081604001518260200151105b5b80611811575082604001518360200151148015611810575081604001518260200151145b5b905092915050565b600061182d83604001518360400151611cd7565b61183f84602001518460200151611cd7565b01905092915050565b600080611868731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6112d1565b111561190957731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119006040805190810160405280600b81526020017f6574685f6d61696e6e6574000000000000000000000000000000000000000000815250611cfc565b60019050611cd4565b600061192873c03a2615d5efaf5f49f60b7bb6583eaec212fdf16112d1565b11156119c95773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119c06040805190810160405280600c81526020017f6574685f726f707374656e330000000000000000000000000000000000000000815250611cfc565b60019050611cd4565b60006119e873b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6112d1565b1115611a895773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a806040805190810160405280600981526020017f6574685f6b6f76616e0000000000000000000000000000000000000000000000815250611cfc565b60019050611cd4565b6000611aa873146500cfd35b22e4a392fe0adc06de1a1368ed486112d1565b1115611b495773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b406040805190810160405280600b81526020017f6574685f72696e6b656279000000000000000000000000000000000000000000815250611cfc565b60019050611cd4565b6000611b68736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756112d1565b1115611bcb57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611cd4565b6000611bea7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6112d1565b1115611c4d577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611cd4565b6000611c6c7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6112d1565b1115611ccf577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611cd4565b600090505b90565b6000818311611cec5782820383830302611cf4565b818303828403025b905092915050565b8060029080519060200190611d12929190611d16565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611d5757805160ff1916838001178555611d85565b82800160010185558215611d85579182015b82811115611d84578251825591602001919060010190611d69565b5b509050611d929190611db7565b5090565b5080546000825590600052602060002090810190611db49190611db7565b50565b611dd991905b80821115611dd5576000816000905550600101611dbd565b5090565b905600a165627a7a7230582001ae74ca3e79664fc605a4bb4d2a50029b0d51c05ee601a98b68bcd3e402d6440029',
                gas: '4700000'
            },

            function (err, deployedContract) {
                if (!err) {
                    if (!deployedContract.address) {
                        console.log(deployedContract["transactionHash"]);
                        $('#addMatchModal').modal('hide');
                        $('#solidBetTransactionModal').modal({
                            keyboard: false,
                            show: true
                        });

                        $.ajax({
                            method: 'POST',
                            contentType: 'application/json',
                            url: base_url + '/v1/contracts/add',
                            data: JSON.stringify({
                                account: App.account,
                                type: +visibility_flag,
                                uuid: +App.matchId,
                                category: 'sports',
                                transactionHash: deployedContract["transactionHash"],
                                execution_time: Math.floor(new Date(match["utcDate"]).getTime() / 1000),
                                subscription_price: _price
                            }),
                            success: function (data, textStatus, jqXHR) {
                                current_data = data;
                                if (data['success']) {
                                    let content = "";
                                    let link = `https://ropsten.etherscan.io/tx/${deployedContract["transactionHash"]}`;
                                    content += `Track your transaction by clicking <a href="${link}" target="_blank">here</a>`;
                                    $("#solidBetTransactionModalBody").html(content);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log('Failed to post data.');
                            }
                        });

                    } else {
                        if (current_data['success']) {
                            $('#addTickerModal').modal('hide');
                            $('#solidBetTransactionModal').modal({
                                keyboard: false,
                                show: true
                            });
                            console.log(deployedContract.address);
                            let deployed_contract_content = "";
                            let link = `https://ropsten.etherscan.io/address/${deployedContract["address"]}`;
                            let local_link = `./contracts/${+temp_match_id}/${current_data['result'][0]}`;
                            deployed_contract_content += `Successfully created and deployed contract for match: ${+temp_match_id}.<br/>`;
                            deployed_contract_content += `Check your contract on the ropsten network <a href="${link}" target="_blank">here</a><br/>`;
                            deployed_contract_content += `Check your deployed contract bet by clicking <a href="${local_link}" target="_blank">here</a><br/>`;
                            $("#solidBetTransactionModalBody").html(deployed_contract_content);
                        }
                    }
                } else {
                    console.log(err);
                }
            });
    },

    createCryptoBetContract: function () {
        let current_data = {};
        var _creator = App.account;
        var _currency = App.currencyId;
        let __closure_delay = $("#closure_delay").val();
        let __execution_delay = $("#execution_delay").val();
        let visibility_flag = $('#visibility_flag option:selected').val();
        let _closureDelay = (new Date(__closure_delay).getTime() - new Date().getTime()) / 1000;
        let _executionDelay = (new Date(__execution_delay).getTime() - new Date().getTime()) / 1000;
        var _subscriptionPrice = $("#subscription_price").val() * 1e18;

        var cryptopricebetContract = web3.eth.contract(App.SOLID_CRYPTO_BET_ABI);
        var cryptopricebet = cryptopricebetContract.new(
            _creator,
            _currency,
            _closureDelay,
            _executionDelay,
            _subscriptionPrice,
            {
                from: App.account,
                value: 0.1 * 1e18,
                data: '0x608060408190526005805460a060020a61ffff0219169055600a805460ff1916905560a080620032ed8339810160409081528151602083015191830151606084015160809094015160058054600160a060020a0319163317905591939091818310620000cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642054696d696e67000000000000000000000000000000000000604482015290519081900360640190fd5b6005805433600160a060020a03199182161790915560128054909116600160a060020a03871617905560068490556007839055600882905560098190556200011c64010000000062000127810204565b505050505062000dda565b60408051808201909152600381527f55524c000000000000000000000000000000000000000000000000000000000060208201526200016f9064010000000062000244810204565b303111620001de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e6f204247617a00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620002416007546040805190810160405280600381526020017f55524c00000000000000000000000000000000000000000000000000000000008152506020604051908101604052806000815250620004ff640100000000026401000000009004565b50565b60008054600160a060020a031615806200027b57506000546200027990600160a060020a031664010000000062000953810204565b155b15620002985762000296600064010000000062000957810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200030457600080fd5b505af115801562000319573d6000803e3d6000fd5b505050506040513d60208110156200033057600080fd5b5051600154600160a060020a0390811691161462000402576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620003b457600080fd5b505af1158015620003c9573d6000803e3d6000fd5b505050506040513d6020811015620003e057600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b838110156200047d57818101518382015260200162000463565b50505050905090810190601f168015620004ab5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015620004cb57600080fd5b505af1158015620004e0573d6000803e3d6000fd5b505050506040513d6020811015620004f757600080fd5b505192915050565b600080548190600160a060020a031615806200053857506000546200053690600160a060020a031664010000000062000953810204565b155b15620005555762000553600064010000000062000957810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620005c157600080fd5b505af1158015620005d6573d6000803e3d6000fd5b505050506040513d6020811015620005ed57600080fd5b5051600154600160a060020a03908116911614620006bf576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200067157600080fd5b505af115801562000686573d6000803e3d6000fd5b505050506040513d60208110156200069d57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152875160248401528751600160a060020a039094169363524f388993899383926044909201919085019080838360005b838110156200073a57818101518382015260200162000720565b50505050905090810190601f168015620007685780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156200078857600080fd5b505af11580156200079d573d6000803e3d6000fd5b505050506040513d6020811015620007b457600080fd5b50519050670de0b6b3a764000062030d403a0201811115620007da57600091506200094b565b6001546040517fadf59f9900000000000000000000000000000000000000000000000000000000815260048101878152606060248301908152875160648401528751600160a060020a039094169363adf59f999386938b938b938b936044810191608490910190602087019080838360005b83811015620008665781810151838201526020016200084c565b50505050905090810190601f168015620008945780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620008c9578181015183820152602001620008af565b50505050905090810190601f168015620008f75780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b1580156200091957600080fd5b505af11580156200092e573d6000803e3d6000fd5b50505050506040513d60208110156200094657600080fd5b505191505b509392505050565b3b90565b60006200096c64010000000062000972810204565b92915050565b6000806200099d731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed64010000000062000953810204565b111562000a1b5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015262000a129064010000000062000d1f810204565b50600162000d1c565b600062000a4573c03a2615d5efaf5f49f60b7bb6583eaec212fdf164010000000062000953810204565b111562000aba5760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015262000a129064010000000062000d1f810204565b600062000ae473b7a07bcf2ba2f2703b24c0691b5278999c59ac7e64010000000062000953810204565b111562000b595760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015262000a129064010000000062000d1f810204565b600062000b8373146500cfd35b22e4a392fe0adc06de1a1368ed4864010000000062000953810204565b111562000bf85760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015262000a129064010000000062000d1f810204565b600062000c22736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47564010000000062000953810204565b111562000c58575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000d1c565b600062000c827320e12a1f859b3feae5fb2a0a32c18f5a65555bbf64010000000062000953810204565b111562000cb8575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000d1c565b600062000ce27351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa64010000000062000953810204565b111562000d18575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000d1c565b5060005b90565b805162000d3490600290602084019062000d38565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000d7b57805160ff191683800117855562000dab565b8280016001018555821562000dab579182015b8281111562000dab57825182559160200191906001019062000d8e565b5062000db992915062000dbd565b5090565b62000d1c91905b8082111562000db9576000815560010162000dc4565b6125038062000dea6000396000f30060806040526004361061010e5763ffffffff60e060020a6000350416630f574ba78114610113578063200d2ed21461013057806327dc297e1461016957806338bbfa50146101c95780633f4ba83a1461026557806348c4a7ef1461027a5780634ef9b89c1461028f5780635797100d146102b057806359221a68146102c55780635c975abb146102f957806361bc221a1461032257806365372147146103375780638456cb59146103c15780638b257989146103d65780638da5cb5b146103eb5780639ead8f9d14610400578063a2fb117514610415578063bdc8e54c1461042d578063e3ae85f014610442578063e5a6b10f14610457578063efbe1c1c1461046c578063f2fde38b14610481575b600080fd5b61011e6004356104a2565b60408051918252519081900360200190f35b34801561013c57600080fd5b50610145610617565b6040518082600381111561015557fe5b60ff16815260200191505060405180910390f35b34801561017557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101c79583359536956044949193909101919081908401838280828437509497506106209650505050505050565b005b3480156101d557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101c795833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506106d39650505050505050565b34801561027157600080fd5b506101c76106d8565b34801561028657600080fd5b5061011e61079a565b34801561029b57600080fd5b5061011e600160a060020a03600435166107a0565b3480156102bc57600080fd5b506101c76107b2565b3480156102d157600080fd5b506102dd600435610961565b60408051600160a060020a039092168252519081900360200190f35b34801561030557600080fd5b5061030e610989565b604080519115158252519081900360200190f35b34801561032e57600080fd5b5061011e6109aa565b34801561034357600080fd5b5061034c6109b0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038657818101518382015260200161036e565b50505050905090810190601f1680156103b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103cd57600080fd5b506101c7610a47565b3480156103e257600080fd5b5061011e610b1f565b3480156103f757600080fd5b506102dd610b25565b34801561040c57600080fd5b5061011e610b34565b34801561042157600080fd5b506102dd600435610b3a565b34801561043957600080fd5b5061011e610b48565b34801561044e57600080fd5b5061011e610b4e565b34801561046357600080fd5b5061011e610b54565b34801561047857600080fd5b506101c7610b5a565b34801561048d57600080fd5b506101c7600160a060020a0360043516610bb8565b6005546000907501000000000000000000000000000000000000000000900460ff16156104ce57600080fd5b6005805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179055323314801561052457506000600a5460ff16600381111561052257fe5b145b801561053d5750336000908152600c6020526040902054155b80156105495750600082115b801561055757506009543410155b151561056257600080fd5b600b8054600181019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9018054600160a060020a031916339081179091556000818152600c6020908152604091829020859055815185815291517f9e30c3511470799100eca17de5157a6dcc306189b2380a3156e4e0ba8f0f56249281900390910190a2505060108054600101908190556005805475ff0000000000000000000000000000000000000000001916905590565b600a5460ff1681565b610628610c79565b600160a060020a03163314610687576040805160e560020a62461bcd02815260206004820152601760248201527f496e76616c6964204f7261636c652043616c6c6261636b000000000000000000604482015290519081900360640190fd5b6000600a5460ff16600381111561069a57fe5b14156106ad576106a8610e6a565b6106cf565b6001600a5460ff1660038111156106c057fe5b14156106cf576106cf8161105c565b5050565b505050565b600554600160a060020a03163314610728576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206124b8833981519152604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16151561075157600080fd5b6005805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60075481565b600c6020526000908152604090205481565b6005546000907501000000000000000000000000000000000000000000900460ff16156107de57600080fd5b6005805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179081905533600160a060020a0390911614610866576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206124b8833981519152604482015290519081900360640190fd5b6003600a5460ff16600381111561087957fe5b146108ce576040805160e560020a62461bcd02815260206004820152600e60248201527f4e6f74204170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b600a546040516000805160206124988339815191529160ff1690600190808360038111156108f857fe5b60ff16815260200182600381111561090c57fe5b60ff1681526020019250505060405180910390a150600a805460ff191660011781556008805491905561093d610e6a565b6008556005805475ff00000000000000000000000000000000000000000019169055565b600b80548290811061096f57fe5b600091825260209091200154600160a060020a0316905081565b60055474010000000000000000000000000000000000000000900460ff1681565b60105481565b60118054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b505050505090505b90565b600554600160a060020a03163314610a97576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206124b8833981519152604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff1615610abf57600080fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60085481565b600554600160a060020a031681565b600e5481565b600d80548290811061096f57fe5b60095481565b600f5481565b60065481565b600554600160a060020a03163314610baa576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206124b8833981519152604482015290519081900360640190fd5b600554600160a060020a0316ff5b600554600160a060020a03163314610c08576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206124b8833981519152604482015290519081900360640190fd5b600160a060020a0381161515610c1d57600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360058054600160a060020a031916600160a060020a0392909216919091179055565b60008054600160a060020a03161580610ca45750600054610ca290600160a060020a0316611545565b155b15610cb557610cb36000611549565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b505050506040513d6020811015610d3157600080fd5b5051600154600160a060020a03908116911614610de6576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d9a57600080fd5b505af1158015610dae573d6000803e3d6000fd5b505050506040513d6020811015610dc457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050506040513d6020811015610e6357600080fd5b5051905090565b600a5460405160609182916000805160206124988339815191529160ff169060019080836003811115610e9957fe5b60ff168152602001826003811115610ead57fe5b60ff1681526020019250505060405180910390a1600a805460ff1916600117905560408051808201909152600381527f55524c00000000000000000000000000000000000000000000000000000000006020820152610f0b90611559565b303111610f62576040805160e560020a62461bcd02815260206004820152600760248201527f4e6f204247617a00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b606060405190810160405280602d81526020017f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6381526020017f6f6d2f76322f7469636b65722f000000000000000000000000000000000000008152509150611008610fcf6006546117bd565b60408051808201909152601881527f2f292e646174612e71756f7465732e5553442e7072696365000000000000000060208201526118b0565b905061101482826118b0565b91506106d3600754600854036040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250846118ec565b60008080808060608180808080806001600a5460ff16600381111561107d57fe5b148061109957506003600a5460ff16600381111561109757fe5b145b15156110ef576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c696420537461747573000000000000000000000000000000000000604482015290519081900360640190fd5b8c601190805190602001906111059291906123ff565b506111118d6006611cde565b600b54604080518281526020808402820101909152919c50600099508015611143578160200160208202803883390190505b50965060008b11156114d75760009b505b600b548c10156112b05761119f600c6000600b8f81548110151561117457fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020548c611e50565b99508b15156111af578960010198505b888a101561124a57600b8054600099508d9081106111c957fe5b6000918252602090912001548751600160a060020a039091169088908a9081106111ef57fe5b600160a060020a03909216602092830290910190910152600b80548b9a50600c916000918f90811061121d57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054600e556112a5565b888a14156112a557600b80548d90811061126057fe5b600091825260209091200154875160019990990198600160a060020a039091169088908a90811061128d57fe5b600160a060020a039092166020928302909101909101525b6001909b019a611154565b60105460095402955060646046870204945087600101858115156112d057fe5b04935084860392506064604684026005546040519290910493503031889003848603019250600160a060020a03169082156108fc029083906000818181858888f19350505050158015611327573d6000803e3d6000fd5b50601254604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611362573d6000803e3d6000fd5b5060009b505b878c1161146e57600d878d81518110151561137f57fe5b6020908102919091018101518254600181018455600093845291909220018054600160a060020a031916600160a060020a03909216919091179055865187908d9081106113c857fe5b90602001906020020151600160a060020a03166108fc859081150290604051600060405180830381858888f1935050505015801561140a573d6000803e3d6000fd5b50868c81518110151561141957fe5b90602001906020020151600160a060020a03167fe996987d056eca0e2ed60cc6fd77731e38c3a90676a4b93a436854cabbdac12f856040518082815260200191505060405180910390a26001909b019a611368565b600f849055600a546040516000805160206124988339815191529160ff16906002908083600381111561149d57fe5b60ff1681526020018260038111156114b157fe5b60ff1681526020019250505060405180910390a1600a805460ff19166002179055611536565b600a546040516000805160206124988339815191529160ff169060039080838381111561150057fe5b60ff16815260200182600381111561151457fe5b60ff1681526020019250505060405180910390a1600a805460ff191660031790555b50505050505050505050505050565b3b90565b6000611553611e67565b92915050565b60008054600160a060020a03161580611584575060005461158290600160a060020a0316611545565b155b15611595576115936000611549565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051600154600160a060020a039081169116146116c6576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561167a57600080fd5b505af115801561168e573d6000803e3d6000fd5b505050506040513d60208110156116a457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b8381101561173f578181015183820152602001611727565b50505050905090810190601f16801561176c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d60208110156117b557600080fd5b505192915050565b606060008082818515156118065760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506118a7565b8593505b831561182157600190920191600a8404935061180a565b826040519080825280601f01601f19166020018201604052801561184f578160200160208202803883390190505b5091505060001982015b85156118a357815160001982019160f860020a6030600a8a06010291849190811061188057fe5b906020010190600160f860020a031916908160001a905350600a86049550611859565b8194505b50505050919050565b6040805160208181018352600080835283518083018552818152845192830190945281526060926118e592869286929061218f565b9392505050565b600080548190600160a060020a03161580611919575060005461191790600160a060020a0316611545565b155b1561192a576119286000611549565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d60208110156119a657600080fd5b5051600154600160a060020a03908116911614611a5b576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a0f57600080fd5b505af1158015611a23573d6000803e3d6000fd5b505050506040513d6020811015611a3957600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152875160248401528751600160a060020a039094169363524f388993899383926044909201919085019080838360005b83811015611ad4578181015183820152602001611abc565b50505050905090810190601f168015611b015780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611b2057600080fd5b505af1158015611b34573d6000803e3d6000fd5b505050506040513d6020811015611b4a57600080fd5b50519050670de0b6b3a764000062030d403a0201811115611b6e5760009150611cd6565b6001546040517fadf59f9900000000000000000000000000000000000000000000000000000000815260048101878152606060248301908152875160648401528751600160a060020a039094169363adf59f999386938b938b938b936044810191608490910190602087019080838360005b83811015611bf8578181015183820152602001611be0565b50505050905090810190601f168015611c255780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611c58578181015183820152602001611c40565b50505050905090810190601f168015611c855780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b158015611ca657600080fd5b505af1158015611cba573d6000803e3d6000fd5b50505050506040513d6020811015611cd157600080fd5b505191505b509392505050565b6000828180805b8351811015611e335783517f300000000000000000000000000000000000000000000000000000000000000090859083908110611d1e57fe5b90602001015160f860020a900460f860020a02600160f860020a03191610158015611d94575083517f390000000000000000000000000000000000000000000000000000000000000090859083908110611d7457fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b15611ded578115611db357851515611dab57611e33565b600019909501945b600a8302925060308482815181101515611dc957fe5b90602001015160f860020a900460f860020a0260f860020a90040383019250611e2b565b8381815181101515611dfb57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602e60f860020a021415611e2b57600191505b600101611ce5565b6000861115611e455785600a0a830292505b509095945050505050565b6000818311611e61578282036118e5565b50900390565b600080611e87731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611545565b1115611ef85760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152611ef0906123f0565b506001610a44565b6000611f1773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611545565b1115611f805760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152611ef0906123f0565b6000611f9f73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611545565b11156120085760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152611ef0906123f0565b600061202773146500cfd35b22e4a392fe0adc06de1a1368ed48611545565b11156120905760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152611ef0906123f0565b60006120af736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611545565b11156120e3575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610a44565b60006121027320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611545565b1115612136575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610a44565b60006121557351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611545565b1115612189575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610a44565b50600090565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f1916602001820160405280156121e8578160200160208202803883390190505b50935083925060009150600090505b885181101561225557888181518110151561220e57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561223557fe5b906020010190600160f860020a031916908160001a9053506001016121f7565b5060005b87518110156122b757878181518110151561227057fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561229757fe5b906020010190600160f860020a031916908160001a905350600101612259565b5060005b86518110156123195786818151811015156122d257fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156122f957fe5b906020010190600160f860020a031916908160001a9053506001016122bb565b5060005b855181101561237b57858181518110151561233457fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561235b57fe5b906020010190600160f860020a031916908160001a90535060010161231d565b5060005b84518110156123dd57848181518110151561239657fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156123bd57fe5b906020010190600160f860020a031916908160001a90535060010161237f565b50909d9c50505050505050505050505050565b80516106cf9060029060208401905b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061244057805160ff191683800117855561246d565b8280016001018555821561246d579182015b8281111561246d578251825591602001919060010190612452565b5061247992915061247d565b5090565b610a4491905b8082111561247957600081556001016124835600d4980e00002f67ad8fb838ac40b098f695814ed62eccaed4e0d1419d27d53f3e4e6f2050726976696c6567650000000000000000000000000000000000000000a165627a7a72305820ec743938e82eb7a7cc679e77159d7029a37b54b880591e959fd5ac19f6423bc60029',
                gas: '4700000'
            }, function (err, deployedContract) {
                if (!err) {
                    if (!deployedContract.address) {
                        console.log(deployedContract["transactionHash"]);
                        $('#addTickerModal').modal('hide');
                        $('#solidBetTransactionModal').modal({
                            keyboard: false,
                            show: true
                        });

                        $.ajax({
                            method: 'POST',
                            contentType: 'application/json',
                            url: base_url + '/v1/contracts/add',
                            data: JSON.stringify({
                                account: App.account,
                                type: +visibility_flag,
                                uuid: _currency,
                                category: 'crypto',
                                transactionHash: deployedContract["transactionHash"],
                                execution_time: new Date(__closure_delay).getTime() / 1000,
                                subscription_price: _subscriptionPrice
                            }),
                            success: function (data, textStatus, jqXHR) {
                                current_data = data;
                                if (data['success']) {
                                    let content = "";
                                    let link = `https://ropsten.etherscan.io/tx/${deployedContract["transactionHash"]}`;
                                    content += `Track your transaction by clicking <a href="${link}" target="_blank">here</a>`;
                                    $("#solidBetTransactionModalBody").html(content);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log('Failed to post data.');
                            }
                        });
                    } else {
                        if (current_data['success']) {
                            $('#addTickerModal').modal('hide');
                            $('#solidBetTransactionModal').modal({
                                keyboard: false,
                                show: true
                            });
                            console.log(deployedContract.address);
                            let deployed_contract_content = "";
                            let link = `https://ropsten.etherscan.io/address/${deployedContract["address"]}`;
                            let local_link = `./contracts/${_currency}/${current_data['result'][0]}`;
                            let currency_name = App.tickers_data[_currency]['name'];
                            deployed_contract_content += `Successfully created and deployed contract for currency: ${currency_name}.<br/>`;
                            deployed_contract_content += `Check your contract on the ropsten network <a href="${link}" target="_blank">here</a><br/>`;
                            deployed_contract_content += `Check your deployed contract bet by clicking <a href="${local_link}" target="_blank">here</a><br/>`;
                            $("#solidBetTransactionModalBody").html(deployed_contract_content);
                        }
                    }
                } else {
                    console.log(err);
                }
            });
    },

    getMatches: function () {
        return new Promise((resolve, reject) => {
            $.ajax({
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                method: 'GET',
                url: base_url + '/v1/matches',
                success: function (data, textStatus, jqXHR) {
                    return resolve(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    return reject(errorThrown);
                }
            });
        });
    },

    displayMatches: async () => {
        let c_length = await App.getContractsLength('sports');
        let data = await App.getMatches();
        App.matches = data;
        if (data && data.length > 0) {
            data.forEach(match => {
                let disabled = typeof c_length[match['id']] === 'undefined' ? 'disabled' : '';
                let timestamp = new Date(match["utcDate"]).getTime();
                App.matches[match.id] = match;
                let content = `<tr>`;
                content += `<td>${match["id"]} - ${match["league"]}</td>`;
                content += `<td>${match["homeTeam"]["name"]} vs ${match["awayTeam"]["name"]}</td>`;
                content += `<td style="word-wrap: break-word">${formatTime(timestamp)}</td>`;
                content += `<td><a href="${base_url}/matches/${match["id"]}" target="_blank"><button type="button" class="btn btn-primary">View</button></a></td>`;
                content += `<td><a href="${base_url}/contracts/${match["id"]}" target="_blank"><button type="button" class="btn btn-primary" ${disabled}>View</button></a></td>`;
                content += `<td><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addMatchModal" onclick="App.matchId=${match['id']}">Create</button></td>`;
                content += ` < /tr>`;
                $("#upcoming_matches_table").prepend(content);
            });
        }
    },

    getTickers: function () {
        return new Promise((resolve, reject) => {
            $.ajax({
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                method: 'GET',
                url: base_url + '/v1/crypto/tickers',
                success: function (data, textStatus, jqXHR) {
                    return resolve(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    return reject(errorThrown);
                }
            });
        });
    },

    displayTickers: async function () {
        let c_length = await App.getContractsLength('crypto');
        let data = await App.getTickers();
        // console.log(c_length)
        data.forEach(ticker => {
            let disabled = typeof c_length[ticker['id']] === 'undefined' ? 'disabled' : '';
            let t = `<tr>`;
            t += `<td>${ticker['rank']}</td>`;
            t += `<td><a href="https://coinmarketcap.com/currencies/${ticker['name']}/" target="_blank"><img src="https://s2.coinmarketcap.com/static/img/coins/32x32/${ticker['id']}.png"/></a> ${ticker['name']}</td>`;
            t += `<td><a href="${base_url}/contracts/${ticker['id']}" target="_blank"><button type="button" class="btn btn-primary" ${disabled}>View contracts</button></a></td>`;
            t += `<td><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addTickerModal" onclick="App.currencyId=${ticker['id']}">
                        Create Bet
                    </button></td>`;
            t += `</tr>`;
            $("#tickets_table").append(t);
        });
    },

    getContractsLength: function (category) {
        return new Promise((resolve, reject) => {
            $.ajax({
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                method: 'POST',
                contentType: 'application/json',
                url: base_url + '/v1/contracts/length',
                data: {
                    account: App.account,
                    category: category
                },
                success: function (data, textStatus, jqXHR) {
                    return resolve(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    return reject(errorThrown);
                }
            });
        });
    },

    getMatchDetails: function (match_id) {
        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'GET',
            url: `${base_url}/v1/matches/${match_id}`,
            success: function (data, textStatus, jqXHR) {
                let content = "";
                content += `<b>League</b>: ${data['league']}<br/>`;
                content += `<b>Time</b>: ${formatTime(data['timestamp'] * 1000)}<br/>`;
                content += `<b>Countdown</b>: <span id="match_details_countdown_${match_id}"></span><br/>`;
                content += `<b>Status</b>: ${data['status']}<br/>`;
                content += `<b>Team one</b>: ${data['teamOne']['name']}<br/>`;
                content += `<b>Team two</b>: ${data['teamTwo']['name']}<br/>`;
                content += `<b>Team one score</b>: ${data['teamOne']['score']}<br/>`;
                content += `<b>Team two score</b>: ${data['teamTwo']['score']}<br/>`;
                content += `<b>Raw score</b>: ${data['raw']}<br/>`;
                content += `<b>Contracts</b>: <a href="${base_url}/contracts/${match_id}" target="_blank">here</a><br/>`;
                $("#match_details").html(content);                // Set the date we're counting down to
                var countDownDate = new Date(data['timestamp'] * 1000).getTime();

                var x = setInterval(function () {

                    var now = new Date().getTime();

                    var distance = countDownDate - now;

                    var weeks = Math.floor(distance / (1000 * 60 * 60 * 24 * 7));
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24)) % 7;
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    document.getElementById(`match_details_countdown_${match_id}`).innerHTML = `${weeks} weeks ${days} d ${hours} hr ${minutes} mins ${seconds} secs`;

                    // If the count down is over, write some text
                    if (distance < 0) {
                        clearInterval(x);
                        document.getElementById(`match_details_countdown_${match_id}`).innerHTML = "ENDED";
                    }
                }, 1000);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    },

    getContracts: function (uuid) {
        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'POST',
            contentType: 'application/json',
            url: base_url + '/v1/contracts/mine',
            data: {
                account: App.account,
                uuid: uuid
            },
            success: function (data, textStatus, jqXHR) {
                data.forEach(contract => {
                    let category = contract['category'];
                    let type = contract['type'] === 1 ? 'public' : 'private';
                    let content = "";
                    content += `<tr>`;
                    content += `<td>${contract['uuid']}</td>`;
                    content += `<td>${contract['id']}</td>`;
                    content += `<td>${type}</td>`;
                    content += `<td>${formatTime(contract['time'] * 1000)}</td>`;
                    content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;
                    content += `<td><a href="https://ropsten.etherscan.io/tx/${contract['transactionHash']}" target="_blank">here</a></td>`;
                    content += `<td><a href="${base_url}/contracts/${uuid}/${contract['id']}" target="_blank">here</a></td>`;
                    content += `</tr>`;
                    $("#contracts").prepend(content);
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    },

    getContract: function (uuid, betId) {
        return new Promise((resolve, reject) => {
            $.ajax({
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                method: 'POST',
                contentType: 'application/json',
                url: base_url + '/v1/contracts/fetch',
                data: {
                    account: App.account,
                    uuid: uuid,
                    id: betId
                },
                success: function (_data, textStatus, jqXHR) {
                    if (_data.length === 1) {
                        return resolve(_data[0]);
                    } else {
                        return reject("")
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    return reject(errorThrown);
                }
            });
        });
    },

    displayContract: async (uuid, betId) => {
        let data = await App.getContract(uuid, betId);
        if (data['category'] === 'sports') {
            /**
             * Match
             */
            let MatchContract = web3.eth.contract(App.SOLID_SPORT_BET_ABI);
            App.MatchInstance = MatchContract.at(data['contractAddress']);
            let states = ['PENDING', "SUCCESS"];

            App.MatchInstance.details(function (err, res) {
                if (!err) {
                    App.MatchInstancePrice = res[6].valueOf();
                    let _matchId = res[0];
                    let _league = web3.toAscii(res[1]);
                    let _teamOne = web3.toAscii(res[2]);
                    let _teamTwo = web3.toAscii(res[3]);
                    let _matchTimestamp = (res[4]).valueOf() * 1000;
                    let _executionDelay = (res[5]).valueOf() * 1000;
                    App.execution_time = res[5].valueOf();
                    let _price = (res[6]).valueOf() / 1e18;
                    let _status = res[7];
                    let content = "";
                    content += `<b>Contract address</b>: <a href="https://ropsten.etherscan.io/address/${data['contractAddress']}" target="_blank">${data['contractAddress']}</a><br/>`;
                    content += `<b>Match #</b>: ${_matchId}<br/>`;
                    content += `<b>Bet #</b>: ${betId}<br/>`;
                    content += `<b>League</b>: ${_league}<br/>`;
                    content += `<b>Team one</b>: ${_teamOne}<br/>`;
                    content += `<b>Team two</b>: ${_teamTwo}<br/>`;
                    content += `<b>Time</b>: ${formatTime(_matchTimestamp)}<br/>`;
                    content += `<b>Execution delay</b>: ${formatTime(_executionDelay)}<br/>`;
                    content += `<b>Price</b>: ${_price} ETH <br/>`;
                    content += `<b>Status</b>: ${states[_status]}<br/>`;
                    $("#bet_details").html(content);
                }
            });

            let MATCH_SUBS = App.MatchInstance.newSubscriber({
                // address: App.account
            }, {
                fromBlock: 0,
                toBlock: 'latest',
            });

            MATCH_SUBS.watch(function (error, event) {
                if (!error) {
                    let result = event['args'];
                    let content = `<tr>`;
                    content += `<td>${result['addr']}</td>`;
                    content += `<td>${result['scoreOne']}</td>`;
                    content += `<td>${result['scoreTwo']}</td>`;
                    content += `</tr>`;
                    $("#bet_subscribers").prepend(content)
                    // console.log(event);
                }
            });

            let MATCH_WIN_RESULT = App.MatchInstance.betResolved({
                // address: App.account
            }, {
                fromBlock: 0,
                toBlock: 'latest',
            });

            MATCH_WIN_RESULT.watch(function (error, event) {
                if (!error) {
                    let result = event['args'];
                    let scoreOne = result['scoreOne'].valueOf();
                    let scoreTwo = result['scoreTwo'].valueOf();
                    let content = ``;
                    content += `<b>Score one</b>: ${scoreOne}<br/>`;
                    content += `<b>Score two</b>: ${scoreTwo}`;
                    $("#result_details").html(content)
                }
            });
        } else {
            /**
             * Crypto contract details
             */

            let CryptoContract = web3.eth.contract(App.SOLID_CRYPTO_BET_ABI);
            App.CryptoInstance = CryptoContract.at(data['contractAddress']);
            /**
             * OPENED, PENDING, EXECUTED, ERROR
             */

            let states = ['OPENED', 'PENDING', 'EXECUTED', 'ERROR'];
            $("#contractAddress").html(`<a href="https://ropsten.etherscan.io/address/${data['contractAddress']}" target="_blank">${data['contractAddress']}</a>`);
            App.CryptoInstance.currency(function (err, res) {
                $("#currency").html(App.tickers_data[res.valueOf()]['name']);
            });

            App.CryptoInstance.closureDelay(function (err, res) {
                $("#closureDelay").html(formatTime(res.valueOf() * 1000));
            });

            App.CryptoInstance.executionDelay(function (err, res) {
                $("#executionDelay").html(formatTime(res.valueOf() * 1000));
                App.execution_time = res.valueOf();
            });

            App.CryptoInstance.subscriptionPrice(function (err, res) {
                $("#subscriptionPrice").html((res.valueOf() / 1e18) + " ETH");
                App.CryptoInstancePrice = res.valueOf();
            });

            App.CryptoInstance.status(function (err, res) {
                $("#status").html(states[res.valueOf()]);
            });

            App.CryptoInstance.winGuess.call(function (err, res) {
                if (res.valueOf() == 0) {
                    $("#winGuess").html('-');
                } else {
                    $("#winGuess").html(res.valueOf());
                }
            });

            App.CryptoInstance.winReward.call(function (err, res) {
                if (res.valueOf() == 0) {
                    $("#winReward").html('-');
                } else {
                    $("#winReward").html(res.valueOf() / 1e18);
                }
            });

            App.CryptoInstance.result.call(function (err, res) {
                $("#winResult").html(res);
            });

            let CRYPTO_SUBS = App.CryptoInstance.newSubscriber({
                // address: App.account
            }, {
                fromBlock: 0,
                toBlock: 'latest',
            });

            CRYPTO_SUBS.watch(function (error, event) {
                if (!error) {
                    let result = event['args'];
                    let content = `<tr>`;
                    content += `<td>${result['addr']}</td>`;
                    content += `<td>${(result['guess'] / 1e2).toFixed(2)}</td>`;
                    content += `</tr>`;
                    $("#bet_subscribers").prepend(content)
                }
            });


            let CRYPTO_WIN_RESULT = App.CryptoInstance.newWinner({
                // address: App.account
            }, {
                fromBlock: 0,
                toBlock: 'latest',
            });

            CRYPTO_WIN_RESULT.watch(function (error, event) {
                if (!error) {
                    let result = event['args'];
                    let reward = (result['reward']).valueOf() / 1e18;
                    let content = `<tr>`;
                    content += `<td>${result['addr']}</td>`;
                    content += `<td>${reward}</td>`;
                    content += `</tr>`;
                    $("#winners").prepend(content)
                }
            });
        }
        console.log(`Successfully loaded uuid: ${uuid} - betId: ${betId}`)
    },

    subscribeMatchContract: function () {
        let inputTeamScoreOne = $("#inputTeamScoreOne").val();
        let inputTeamScoreTwo = $("#inputTeamScoreTwo").val();
        App.MatchInstance.subscribe(inputTeamScoreOne, inputTeamScoreTwo, {
            value: App.MatchInstancePrice,
            from: App.account
        }, function (err, res) {
            if (err) {
                console.log(err);
            } else {
                $.ajax({
                    method: 'POST',
                    contentType: 'application/json',
                    url: base_url + '/v1/bets/add',
                    data: JSON.stringify({
                        id: App.betId,
                        category: 'matches',
                        account: App.account,
                        transactionHash: res,
                        contractAddress: App.MatchInstance.address,
                        execution_time: App.execution_time
                    }),
                    success: function (data, textStatus, jqXHR) {
                        let content = "";
                        let link = `https://ropsten.etherscan.io/tx/${res}`;
                        content += `Successfully subscribed for match: ${+App.matchId}<br/>`;
                        content += `Track your transaction on the ropsten network by clicking <a href="${link}" target="_blank">here</a>`
                        $("#solidBetTransactionModalBody").html(content);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('Failed to post data.');
                    }
                });
            }
        });
    },

    subscribeCryptoContract: function () {
        let guess_input = $("#guess_input").val();
        App.CryptoInstance.subscribe(guess_input * 1e2, {
            value: App.CryptoInstancePrice,
            from: App.account
        }, function (err, res) {
            if (err) {
                console.log(err);
            } else {
                $.ajax({
                    method: 'POST',
                    contentType: 'application/json',
                    url: base_url + '/v1/bets/add',
                    data: JSON.stringify({
                        id: App.betId,
                        category: 'crypto',
                        account: App.account,
                        transactionHash: res,
                        contractAddress: App.CryptoInstance.address,
                        execution_time: App.execution_time
                    }),
                    success: function (data, textStatus, jqXHR) {
                        let content = "";
                        let link = `https://ropsten.etherscan.io/tx/${res}`;
                        content += `Successfully subscribed for match: ${+App.uuid}<br/>`;
                        content += `Track your transaction on the ropsten network by clicking <a href="${link}" target="_blank">here</a>`
                        $("#solidBetTransactionModalBody").html(content);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('Failed to post data.');
                    }
                });
            }
        });
    },

    showBets: async (category) => {
        // console.log(category)
        let public_bets = await App.getBets(category, 'public');
        let private_bets = await App.getBets(category, 'private');
        console.log(public_bets);
        console.log(private_bets);
        let data = public_bets.concat(private_bets);
        if (data && data.length > 0) {
            for (let i = 0; i < data.length; i++) {
                let contract = data[i];
                let type = contract['type'] === 1 ? 'public' : 'private';
                // let category = contract['category'];
                let content = "";
                content += `<tr>`;
                content += `<td>${(i + 1)}</td>`;
                if (category === 'crypto') {
                    if (typeof App.tickers_data[contract['uuid']] !== 'undefined') {
                        content += `<td>${App.tickers_data[contract['uuid']]['name']}</td>`;
                    } else {
                        content += `<td>-</td>`;
                    }
                }
                content += `<td>${contract['subscription_price'] / 1e18} ETH</td>`;
                content += `<td>${type}</td>`;
                if (category === 'sports') {
                    content += `<td>${App['matches'][contract['uuid']]['league']}</td>`;
                    content += `<td>${App['matches'][contract['uuid']]['homeTeam']['name']} vs ${App['matches'][contract['uuid']]['awayTeam']['name']}</td>`;
                }
                content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;

                let bet_id = type === 'public' ? 'id' : 'betId';
                content += `<td><a href="${base_url}/contracts/${contract['uuid']}/${contract[bet_id]}" target="_blank"><button type="button" class="btn btn-primary">Open</button></a></td>`;
                content += `</tr>`;
                $("#bets").append(content);
            }
        }
    },

    getBets: async (category, type) => {
        return new Promise((resolve, reject) => {
            $.ajax({
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                method: 'POST',
                contentType: 'application/json',
                url: base_url + `/v1/contracts/${type}`,
                data: {
                    account: App.account,
                    category: category
                },
                success: function (data, textStatus, jqXHR) {
                    return resolve(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    return reject(errorThrown);
                }
            });
        });
    },

    getInactiveBets: function () {
        $("#bets").html("");
        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'POST',
            contentType: 'application/json',
            url: base_url + '/v1/contracts/inactive/all',
            data: {
                account: App.account
            },
            success: function (data, textStatus, jqXHR) {
                if (data && data.length > 0) {
                    data.forEach(contract => {
                        let type = contract['type'] === 1 ? 'public' : 'private';
                        // let category = contract['category'];
                        let content = "";
                        content += `<tr>`;
                        content += `<td>${contract['id']}</td>`;
                        content += `<td>${type}</td>`;
                        content += `<td>${contract['category']}</td>`;
                        content += `<td>contract</td>`;
                        content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;
                        content += `<td><a href="${base_url}/contracts/${contract['uuid']}/${contract['id']}" target="_blank">here</a></td>`;
                        content += `</tr>`;
                        $("#bets").prepend(content);
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });


        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'POST',
            contentType: 'application/json',
            url: base_url + '/v1/bets/inactive/all',
            data: {
                account: App.account
            },
            success: function (data, textStatus, jqXHR) {
                if (data && data.length > 0) {
                    data.forEach(contract => {
                        let type = contract['type'] === 1 ? 'public' : 'private';
                        let content = "";
                        content += `<tr>`;
                        content += `<td>${contract['betId']}</td>`;
                        content += `<td>${type}</td>`;
                        content += `<td>${contract['category']}</td>`;
                        content += `<td>subscription</td>`;
                        content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;
                        content += `<td><a href="${base_url}/contracts/${contract['uuid']}/${contract['betId']}" target="_blank">here</a></td>`;
                        content += `</tr>`;
                        $("#bets").prepend(content);
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    },

    getOwnedInactiveBets: function () {
        $("#bets").html("");
        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'POST',
            contentType: 'application/json',
            url: base_url + '/v1/contracts/inactive/mine',
            data: {
                account: App.account
            },
            success: function (data, textStatus, jqXHR) {
                if (data && data.length > 0) {
                    data.forEach(contract => {
                        let type = contract['type'] === 1 ? 'public' : 'private';
                        // let category = contract['category'];
                        let content = "";
                        content += `<tr>`;
                        content += `<td>${contract['id']}</td>`;
                        content += `<td>${type}</td>`;
                        content += `<td>${contract['category']}</td>`;
                        content += `<td>contract</td>`;
                        content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;
                        content += `<td><a href="${base_url}/contracts/${contract['uuid']}/${contract['id']}" target="_blank">here</a></td>`;
                        content += `</tr>`;
                        $("#bets").prepend(content);
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });


        $.ajax({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            method: 'POST',
            contentType: 'application/json',
            url: base_url + '/v1/bets/inactive/mine',
            data: {
                account: App.account
            },
            success: function (data, textStatus, jqXHR) {
                if (data && data.length > 0) {
                    data.forEach(contract => {
                        let type = contract['type'] === 1 ? 'public' : 'private';
                        let content = "";
                        content += `<tr>`;
                        content += `<td>${contract['betId']}</td>`;
                        content += `<td>${type}</td>`;
                        content += `<td>${contract['category']}</td>`;
                        content += `<td>subscription</td>`;
                        content += `<td>${formatTime(contract['execution_time'] * 1000)}</td>`;
                        content += `<td><a href="${base_url}/contracts/${contract['uuid']}/${contract['betId']}" target="_blank">here</a></td>`;
                        content += `</tr>`;
                        $("#bets").prepend(content);
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    },

    load: async () => {
        App.account = await App.getAccount();
        console.log("Successfully loaded web3 and all related data.");
    },

    getTickersData: async () => {
        let _data = await $.getJSON(`${base_url}/ticker.json`);
        App.tickers_data = _data['data'];
        console.log("Successfully loaded tickers data.");
    },

    getABIs: async () => {
        let sports = await $.getJSON(`${base_url}/sports.json`);
        let crypto = await $.getJSON(`${base_url}/crypto.json`);
        App.SOLID_SPORT_BET_ABI = sports['abi'];
        App.SOLID_CRYPTO_BET_ABI = crypto['abi'];
        console.log("Successfully loaded ABIs.");
    },

    getHistory: async () => {
        let history_flag = $('#history_flag option:selected').val();
        if (history_flag == 1) {
            await App.getInactiveBets();
        } else {
            await App.getOwnedInactiveBets()
        }
    }
}

function toHex(s) {
    var hex = '';
    for (var i = 0; i < s.length; i++) {
        hex += '' + s.charCodeAt(i).toString(16);
    }
    return `0x${hex}`;
}

function waitSeconds(seconds) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, seconds * 1000);
    });
}

function dateToSeconds(current_date) {
    return Math.floor(new Date(current_date).getTime() / 1000);
}

$('#solidBetTransactionModal').on('hidden.bs.modal', function (e) {
    $('#solidBetTransactionModalBody').html('');
});

$('#addTickerModal').on('hidden.bs.modal', function (e) {
    App.currencyId = null;
});

$('#addMatchModal').on('hidden.bs.modal', function (e) {
    App.matchId = null;
});

onload = async () => {
    await App.getABIs();
    await App.getTickersData();
    await App.initWeb3();
    await App.load();

    $(document).on('click', '#subscribe_sports_button', App.subscribeMatchContract);
    $(document).on('click', '#subscribe_crypto_button', App.subscribeCryptoContract);
    $(document).on('click', '#add_ticker_button', App.createCryptoBetContract);
    $(document).on('click', '#add_sports_button', App.createMatchesBetContract);
    $(document).on('click', '#fetch_bets_button', App.getBets);
    $(document).on('click', '#display_history_button', App.getHistory);

    $("#crypto").height($(window).height());
    $("#sports").height($(window).height());
    let pathname = window.location.pathname;
    let link = window.location.href;
    // console.log(link)
    let splitted = link.replace(base_url, "");
    // console.log(pathname);
    // console.log(window.location.href);
    splitted = splitted.split("/");
    // console.log(splitted)
    if (splitted.length === 2 && splitted[1] === 'matches') {
        await App.displayMatches();
        await App.showBets('sports')
    }

    if (splitted.length === 2 && splitted[1] === 'crypto') {
        await App.displayTickers();
        await App.showBets('crypto');
        // console.log(formatTimeInput(new Date()))
        let current_date = new Date();

        let closure_ms = 60 * 60 * 1 * 1000;
        let closure_timestamp = current_date.getTime() + closure_ms;
        let closure_date = new Date(closure_timestamp);

        let execution_ms = 60 * 60 * 2 * 1000;
        let execution_timestamp = closure_timestamp + execution_ms;
        let execution_date = new Date(execution_timestamp);

        $("#closure_delay").val(formatTimeInput(closure_date));
        $("#execution_delay").val(formatTimeInput(execution_date));
    }

    if (splitted.length === 2 && splitted[1] === 'history') {
        // App.getInactiveBets();
        // App.getOwnedInactiveBets();
    }

    if (splitted.length === 3 && splitted[1] === 'contracts' && !isNaN(+splitted[2])) {
        await App.getContracts(+splitted[2]);
    }

    if (splitted.length === 3 && splitted[1] === 'matches' && !isNaN(+splitted[2])) {
        await App.getMatchDetails(+splitted[2]);
    }

    if (splitted.length === 4 && splitted[1] === 'contracts' && !isNaN(+splitted[2])) {
        await App.displayContract(+splitted[2], splitted[3]);
        App.uuid = +splitted[2];
        App.betId = splitted[3];
    }
};

function openPage(path) {
    window.location.replace(`${base_url}/${path}`);
}

function formatTime(_timestamp) {
    let current_date = new Date(_timestamp);
    return `${current_date.getUTCDate()}-${current_date.getUTCMonth() + 1}-${current_date.getFullYear()} ${current_date.toLocaleTimeString()}`;
}


function formatTimeInput(_timestamp) {
    let current_date = new Date(_timestamp);
    let current_time = `${current_date.getFullYear()}-${current_date.getUTCMonth() + 1}-${current_date.getUTCDate()}T${fixTwo(current_date.getHours())}:${fixTwo(current_date.getUTCMinutes())}`;
    return current_time;
}

function fixTwo(number) {
    if (number < 10) {
        return '0' + number;
    } else {
        return number;
    }
}